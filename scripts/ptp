#!/bin/env python
import sys
import logging
from pprint import pprint
from urlparse import urlparse, parse_qs

import argparse

import ptpapi

logger = logging.getLogger(__name__)

def ellipsize(string, length):
    if len(string) > length:
        return string[:length-3] + '...'
    return string

def do_inbox(args):
    api = ptpapi.login()
    if args.conversation:
        conv = api.current_user().inbox_conv(args.conversation)
        print conv['Subject']
        for m in conv['Message']:
            print m
            print
        return
    msgs = list(api.current_user().inbox())
    print "ID" + ' '*6 + "Subject" + ' '*25 + 'Sender' + ' '*9
    print '-'*55
    for m in msgs:
        if not args.unread or (args.unread and m['Unread']):
            print "{0: <8}{1: <32}{2: <15}".format(
                m['ID'],
                ellipsize(m['Subject'], 30), 
                ellipsize(m['Sender'], 15))

def do_download(args):
    api = ptpapi.login()
    for arg in args.turl:
        url_args = parse_qs(urlparse(arg).query)
        if 'torrentid' in url_args:
            t = ptpapi.Torrent(url_args['torrentid'][0])
        elif 'action' in url_args and url_args['action'][0] == 'download':
            t = ptpapi.Torrent(url_args['id'][0])
        else:
            logger.warning('URL {0} doesn\'t appear to be a PTP torrent link.'.format(arg))
            continue
        t.download_to_file()        

def do_search(args):
    terms = {}
    for arg in args.filter:
        term = arg.partition('=')
        if not term[2]:
            terms['searchstr'] = term[0]
        else:
            terms[term[0]] = term[2]
    api = ptpapi.login()
    for m in api.search(terms):
        print "%s (%s) - %s - [%s] - [PTP %s, IMDB %s]" % (m.Title, m.Year, ', '.join([d['Name'] for d in m.Directors]), '/'.join(m.Tags), m.GroupId, (m.ImdbId or '0'))
        for t in m.Torrents:
            print "- %s/%s/%s/%s - %s - %s/%s/%s" % (t.Codec, t.Container, t.Source, t.Resolution, t.ReleaseName, t.Snatched, t.Seeders, t.Leechers)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Extensible command line utility for PTP')
    parser.add_argument('--debug', help='Print lots of debugging statements', action="store_const", dest="loglevel", const=logging.DEBUG, default=logging.WARNING)
    parser.add_argument('-v', '--verbose', help='Be verbose', action="store_const", dest="loglevel", const=logging.INFO)
    subparsers = parser.add_subparsers()

    search_parser = subparsers.add_parser('search')
    search_parser.add_argument('filter', help="A list of filter in [field]=[text] format", nargs='*')
    search_parser.set_defaults(func=do_search)

    download_parser = subparsers.add_parser('download')
    download_parser.add_argument('turl', help="A list of torrent URLs to download from", nargs='*', metavar='torrent URL')
    download_parser.set_defaults(func=do_download)

    inbox_parser = subparsers.add_parser('inbox')
    inbox_parser.add_argument('-u', '--unread', help="Only show unread messages", action="store_true")
    inbox_parser.add_argument('-c', '--conversation', help="Get the messages of a specific conversation", type=int)
    inbox_parser.set_defaults(func=do_inbox)

    args = parser.parse_args()

    logging.basicConfig(level=args.loglevel)

    args.func(args)
